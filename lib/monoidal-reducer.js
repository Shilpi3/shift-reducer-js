"use strict";

var MonoidalReducer = (function () {
  var MonoidalReducer = function MonoidalReducer(monoid) {
    this.identity = monoid.empty();
    var concat = monoid.prototype && monoid.prototype.concat || monoid.concat;
    this.append = this.append2 = function (a, b) {
      return concat.call(a, b);
    };
  };

  MonoidalReducer.prototype.fromNull = function (a) {
    return a == null ? this.identity : a;
  };

  MonoidalReducer.prototype.append3 = function (a, b, c) {
    return this.append(this.append(a, b), c);
  };

  MonoidalReducer.prototype.append4 = function (a, b, c, d) {
    return this.append(this.append3(a, b, c), d);
  };

  MonoidalReducer.prototype.fold = function (as, a) {
    var _this = this;
    return as.reduce(function (memo, x) {
      return _this.append(memo, x);
    }, a == null ? this.identity : a);
  };

  MonoidalReducer.prototype.reduceArrayExpression = function (node, elements) {
    return this.fold(elements.filter(function (x) {
      return x != null;
    }));
  };

  MonoidalReducer.prototype.reduceAssignmentExpression = function (node, binding, expression) {
    return this.append(binding, expression);
  };

  MonoidalReducer.prototype.reduceBinaryExpression = function (node, left, right) {
    return this.append(left, right);
  };

  MonoidalReducer.prototype.reduceBlock = function (node, statements) {
    return this.fold(statements);
  };

  MonoidalReducer.prototype.reduceBlockStatement = function (node, block) {
    return block;
  };

  MonoidalReducer.prototype.reduceBreakStatement = function (node, label) {
    return this.fromNull(label);
  };

  MonoidalReducer.prototype.reduceCallExpression = function (node, callee, args) {
    return this.fold(args, callee);
  };

  MonoidalReducer.prototype.reduceCatchClause = function (node, binding, body) {
    return this.append(binding, body);
  };

  MonoidalReducer.prototype.reduceComputedMemberExpression = function (node, object, expression) {
    return this.append(object, expression);
  };

  MonoidalReducer.prototype.reduceConditionalExpression = function (node, test, consequent, alternate) {
    return this.append3(test, consequent, alternate);
  };

  MonoidalReducer.prototype.reduceContinueStatement = function (node, label) {
    return this.fromNull(label);
  };

  MonoidalReducer.prototype.reduceDataProperty = function (node, name, expression) {
    return this.append(name, expression);
  };

  MonoidalReducer.prototype.reduceDebuggerStatement = function (node) {
    return this.identity;
  };

  MonoidalReducer.prototype.reduceDoWhileStatement = function (node, body, test) {
    return this.append(body, test);
  };

  MonoidalReducer.prototype.reduceEmptyStatement = function (node) {
    return this.identity;
  };

  MonoidalReducer.prototype.reduceExpressionStatement = function (node, expression) {
    return expression;
  };

  MonoidalReducer.prototype.reduceForInStatement = function (node, left, right, body) {
    return this.append3(left, right, body);
  };

  MonoidalReducer.prototype.reduceForStatement = function (node, init, test, update, body) {
    return this.append4(this.fromNull(init), this.fromNull(test), this.fromNull(update), body);
  };

  MonoidalReducer.prototype.reduceFunctionBody = function (node, directives, statements) {
    return this.append(this.fold(directives), this.fold(statements));
  };

  MonoidalReducer.prototype.reduceFunctionDeclaration = function (node, name, parameters, body) {
    return this.append(this.fold(parameters, name), body);
  };

  MonoidalReducer.prototype.reduceFunctionExpression = function (node, name, parameters, body) {
    return this.append(this.fold(parameters, this.fromNull(name)), body);
  };

  MonoidalReducer.prototype.reduceGetter = function (node, name, body) {
    return this.append(name, body);
  };

  MonoidalReducer.prototype.reduceIdentifier = function (node) {
    return this.identity;
  };

  MonoidalReducer.prototype.reduceIdentifierExpression = function (node, name) {
    return name;
  };

  MonoidalReducer.prototype.reduceIfStatement = function (node, test, consequent, alternate) {
    return this.append3(test, consequent, this.fromNull(alternate));
  };

  MonoidalReducer.prototype.reduceLabeledStatement = function (node, label, body) {
    return this.append(label, body);
  };

  MonoidalReducer.prototype.reduceLiteralBooleanExpression = function (node) {
    return this.identity;
  };

  MonoidalReducer.prototype.reduceLiteralNullExpression = function (node) {
    return this.identity;
  };

  MonoidalReducer.prototype.reduceLiteralNumericExpression = function (node) {
    return this.identity;
  };

  MonoidalReducer.prototype.reduceLiteralRegExpExpression = function (node) {
    return this.identity;
  };

  MonoidalReducer.prototype.reduceLiteralStringExpression = function (node) {
    return this.identity;
  };

  MonoidalReducer.prototype.reduceNewExpression = function (node, callee, args) {
    return this.fold(args, callee);
  };

  MonoidalReducer.prototype.reduceObjectExpression = function (node, properties) {
    return this.fold(properties);
  };

  MonoidalReducer.prototype.reducePostfixExpression = function (node, operand) {
    return operand;
  };

  MonoidalReducer.prototype.reducePrefixExpression = function (node, operand) {
    return operand;
  };

  MonoidalReducer.prototype.reducePropertyName = function (node) {
    return this.identity;
  };

  MonoidalReducer.prototype.reduceReturnStatement = function (node, expression) {
    return this.fromNull(expression);
  };

  MonoidalReducer.prototype.reduceScript = function (node, body) {
    return body;
  };

  MonoidalReducer.prototype.reduceSetter = function (node, name, parameter, body) {
    return this.append3(name, parameter, body);
  };

  MonoidalReducer.prototype.reduceStaticMemberExpression = function (node, object, property) {
    return this.append(object, property);
  };

  MonoidalReducer.prototype.reduceSwitchCase = function (node, test, consequent) {
    return this.fold(consequent, test);
  };

  MonoidalReducer.prototype.reduceSwitchDefault = function (node, consequent) {
    return this.fold(consequent);
  };

  MonoidalReducer.prototype.reduceSwitchStatement = function (node, discriminant, cases) {
    return this.fold(cases, discriminant);
  };

  MonoidalReducer.prototype.reduceSwitchStatementWithDefault = function (node, discriminant, preDefaultCases, defaultCase, postDefaultCases) {
    return this.append4(discriminant, this.fold(preDefaultCases), defaultCase, this.fold(postDefaultCases));
  };

  MonoidalReducer.prototype.reduceThisExpression = function (node) {
    return this.identity;
  };

  MonoidalReducer.prototype.reduceThrowStatement = function (node, expression) {
    return this.fromNull(expression);
  };

  MonoidalReducer.prototype.reduceTryCatchStatement = function (node, block, catchClause) {
    return this.append(block, catchClause);
  };

  MonoidalReducer.prototype.reduceTryFinallyStatement = function (node, block, catchClause, finalizer) {
    return this.append3(block, this.fromNull(catchClause), finalizer);
  };

  MonoidalReducer.prototype.reduceUnknownDirective = function (node) {
    return this.identity;
  };

  MonoidalReducer.prototype.reduceUseStrictDirective = function (node) {
    return this.identity;
  };

  MonoidalReducer.prototype.reduceVariableDeclaration = function (node, declarators) {
    return this.fold(declarators);
  };

  MonoidalReducer.prototype.reduceVariableDeclarationStatement = function (node, declaration) {
    return declaration;
  };

  MonoidalReducer.prototype.reduceVariableDeclarator = function (node, binding, init) {
    return this.append(binding, this.fromNull(init));
  };

  MonoidalReducer.prototype.reduceWhileStatement = function (node, test, body) {
    return this.append(test, body);
  };

  MonoidalReducer.prototype.reduceWithStatement = function (node, object, body) {
    return this.append(object, body);
  };

  return MonoidalReducer;
})();

exports["default"] = MonoidalReducer;
//# sourceMappingURL=data:application/json;base64,